1. Analise o código e tente identificar eventuais erros.
R= Visualmente, é perceptível que o primeiro laço for atribui o valor i para 9 das 10 posições do vetor a[10], após isso o 
segundo laço for tenta printar as 10 posições, sendo o erro o fato da última posição do vetor estar vazia.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.
Ao usar o GBD foi possível verificar o erro ao printar a variávei a[i] depois de executar o comando next até o último loop do
segundo for. Sendo printado o valor 32767, ou seja, um lixo de memória.

///////// Resultados da execução do gbd ////////////
(gdb) next
10        for (i = 0; i < 10; i++){
(gdb) next
13        printf("\n");
(gdb) next
0 1 2 3 4 5 6 7 8 32767 
14        return 0;
(gdb)

/////////////// Resultado do script //////////////////
(gdb) run
Starting program: /mnt/d/Códigos/C/Pratica3_ED/Felippe_Marinho_2021072260/a.out 
0 1 2 3 4 5 6 7 8 32767 
[Inferior 1 (process 1205) exited normally]

///////////// Resultados do Valgrind /////////////////
0 1 2 3 4 5 6 7 8 31
==1990==
==1990== HEAP SUMMARY:
==1990==     in use at exit: 0 bytes in 0 blocks
==1990==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==1990==
==1990== All heap blocks were freed -- no leaks are possible
==1990==
==1990== Use --track-origins=yes to see where uninitialised values come from
==1990== For lists of detected and suppressed errors, rerun with: -s
==1990== ERROR SUMMARY: 7 errors from 5 contexts (suppressed: 0 from 0)

"Na linha 36 é colocado que há 7 erros e na décima posição do vetor também é retornado um lixo de memória."

3. Corrija o código, removendo o(s) erro(s) identificado(s).
O código é corrigido alterando o primeiro loop para percorrer todas as posições do vetor.

4. Utilizando novamente as ferramentas, verifique a remoção do erro.
Utilizando o valgrind é visível que agora todas as posições do vetor estão ocupadas

==1996== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==1996== Command: ./a.out
==1996==
0 1 2 3 4 5 6 7 8 9 
